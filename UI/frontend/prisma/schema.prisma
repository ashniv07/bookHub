// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
model user{
  user_id Int  @id @default(autoincrement())
  user_name String?  @db.VarChar(255)
  password  String?  @db.VarChar(255)
  user_email  String?  @unique
  role_id  Int  
  created_by  Int
  created_at   DateTime @default(now())
  flag  Boolean @default(false)
}

model book {
  book_id       Int      @id @default(autoincrement())
  book_name     String   @db.VarChar(255)
  description   String   @db.Text // Change here
  genre         String   @db.VarChar(255)
  author        String   @db.VarChar(255)
  type          String   @db.VarChar(255)
  edition       String   @db.VarChar(255)
  created_at    DateTime @default(now())          
  created_by    Int
  modified_by   Int
  modified_at   DateTime? @updatedAt
  is_deleted    Boolean  @default(false)
  url           String   @unique
  image         String   @db.Text
}


model borrow_info{
  borrow_id Int @id @default(autoincrement()) @unique
  book_id Int
  user_id Int
  borrow_date DateTime @default(now())
  access_granted Boolean  @default(false)
  access_cut_date DateTime?  
  flag  Boolean  @default(false)
}

model review{
  review_id Int @id @default(autoincrement())
  book_id Int
  user_id Int
  rating  Int
  comment String  @db.Text
  created_at   DateTime @default(now())

}

model role{
  role_id Int @id @default(autoincrement())
  role  String
  permissions String
}

model toDo{
  id Int @id @default(autoincrement())
  user_id Int
  book_name String
  completed Boolean
}

model suggestion {
  suggestion_id         Int      @id @default(autoincrement())
  book_name   String  
  author String
  created_at  DateTime @default(now())
}

model history_book{
  id Int @id @default(autoincrement())
    book_id Int
    user_id Int
    borrow_date DateTime?
    return_date DateTime?
    
}